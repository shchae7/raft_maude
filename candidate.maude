load ./node

mod CANDIDATE is 
  --- a candidate node sends request votes to other nodes and waits for responses 
  pr NODE .
  
  var C : Command .
  var oids : OidSet .
  var cli lea fol : Oid .
  var fols : OidSet .
  vars log log2 oldlog comlog : Log .
  var AS : AttributeSet .
  var N1 N2 N3 term new-term term-res : Nat .
  var E : Entry .
  var M : Msg .
  var B : Bool .

  --- receive yes or not vote
  rl [receive-vote] : 
    (msg Vote(term, B) from fol to lea)
    < lea : CandidateNode | currentTerm : term, yes : N1            , number-response : N2    , AS > => 
    < lea : CandidateNode | currentTerm : term, yes : N1 + to-nat(B), number-response : N2 + 1, AS > .

  --- when everyone responds, become leader and propegate log if majority voted yes
  crl [voted-leader] :
    < lea : CandidateNode | currentTerm : term, log : log, neighbors : fols, waiting : B   , majority : N1, yes : N2, number-neighbors : N3, number-response : N3, AS > =>
    < lea : LeaderNode    | currentTerm : term, log : log, neighbors : fols, waiting : true, majority : N1, yes : 1 , number-neighbors : N3, number-response : 0 , AS >
    (multicast AppendEntry(term, log) from lea to fols)
    if N2 >= N1 .

  --- when everyone responds, if failog, pass on leader request
  crl [fail-leader] :
    < lea : CandidateNode | currentTerm : term, next-neighbor : fol, majority : N1, yes : N2, number-neighbors : N3, number-response : N3, AS > =>
    < lea : FollowerNode  | currentTerm : term, next-neighbor : fol, majority : N1, yes : N2, number-neighbors : N3, number-response : N3, AS >
    (msg BecomeLeader(term + 1) from lea to fol)
    if N2 < N1 .

  --- tell the next node to start leader process and become offline 
  rl [die] :
    (msg Die from cli to lea)
    < lea : CandidateNode | currentTerm : term, next-neighbor : fol, AS > =>
    < lea : OfflineNode   | currentTerm : term, next-neighbor : fol, AS > 
    (msg Die from lea to cli) 
    (msg BecomeLeader(term + 1) from lea to fol) .
endm 