load ./node

mod LEADER is 
  --- a leader node handles incoming queries and replication
  pr NODE .

  var C : Command .
  var oids : OidSet .
  var cli lea fol : Oid .
  var fols : OidSet .
  var log log' comlog : Log .
  var AS : AttributeSet .
  var N1 N2 N3 term term-res : Nat .
  var B : Bool .
  var M : Msg .
  var E : Entry .

  --- when given a Request, add to log and send to all other nodes 
  crl [request-leader] : 
    (msg Request(C) from cli to lea)
    < lea : LeaderNode | currentTerm : term, log : log , neighbors : fols, waiting : false, yes : N1, number-response : N2, AS > 
  =>
    < lea : LeaderNode | currentTerm : term, log : log', neighbors : fols, waiting : true , yes : 1 , number-response : 0 , AS > 
    (multicast AppendEntry(term, log') from lea to fols) 
    if log' := log ; entry(index(head(log)) + 1, term, C) .

  --- acknowlogge that log was updated
  rl [append-entry-response-leader] : 
    (msg AppendEntryResponse(term, B) from fol to lea)
    < lea : LeaderNode | currentTerm : term, log : log, yes : N1, number-response : N2, AS > 
  => 
    < lea : LeaderNode | currentTerm : term, log : log, yes : N1 + to-nat(B), number-response : N2 + 1, AS > .

  --- when everyone responds, commit if majority said yes, retry if not
  crl [commit] :
    < lea : LeaderNode | currentTerm : term, waiting : true , neighbors : oids, log : log, committed : comlog, majority : N1, yes : N2, number-neighbors : N3, number-response : N3, AS > 
  =>
    < lea : LeaderNode | currentTerm : term, waiting : false, neighbors : oids, log : log, committed : log   , majority : N1, yes : N2, number-neighbors : N3, number-response : N3, AS >
    (multicast Commit(term, head(log)) from lea to oids)
    if N2 >= N1 .

  --- retry the AppendEntry message - note, this should never occur if a majority of nodes are online!
  crl [retry] : 
    < lea : LeaderNode | currentTerm : term, neighbors : oids, log : log, majority : N1, yes : N2, number-neighbors : N3, number-response : N3, AS > 
  =>
    < lea : LeaderNode | currentTerm : term, neighbors : oids, log : log, majority : N1, yes : 1 , number-neighbors : N3, number-response : 0 , AS >
    (multicast AppendEntry(term, log) from lea to oids)
    if N2 < N1 .

  --- tell the next node to start leader process and become offline 
  rl [die] :
    (msg Die from cli to lea)
    < lea : LeaderNode  | currentTerm : term, next-neighbor : fol, AS > 
  =>
    < lea : OfflineNode | currentTerm : term, next-neighbor : fol, AS > 
    (msg Die from lea to cli) 
    (msg BecomeLeader(term + 1) from lea to fol) .
endm
